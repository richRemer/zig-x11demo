const req = @import("x11-request.zig");
const rep = @import("x11-reply.zig");
const evt = @import("x11-event.zig");

pub const Message = union(Code) {
    @"error": Error,
    reply: Reply,
    key_press: GenericEvent,
    key_release: GenericEvent,
    button_press: GenericEvent,
    button_release: GenericEvent,
    motion_notify: GenericEvent,
    enter_notify: GenericEvent,
    leave_notify: GenericEvent,
    focus_in: evt.FocusInEvent,
    focus_out: evt.FocusOutEvent,
    keymap_notify: evt.KeymapNotifyEvent,
    expose: evt.ExposeEvent,
    graphics_exposure: GenericEvent,
    no_exposure: GenericEvent,
    visbility_notify: evt.VisibilityNotifyEvent,
    create_notify: GenericEvent,
    destroy_notify: GenericEvent,
    unmap_notify: GenericEvent,
    map_notify: evt.MapNotifyEvent,
    map_request: GenericEvent,
    reparent_notify: evt.ReparentNotifyEvent,
    configure_notify: GenericEvent,
    configure_request: GenericEvent,
    gravity_notify: GenericEvent,
    resize_request: GenericEvent,
    circulate_notify: GenericEvent,
    circulate_request: GenericEvent,
    property_notify: evt.PropertyNotifyEvent,
    selection_clear: GenericEvent,
    selection_request: GenericEvent,
    selection_notify: GenericEvent,
    colormap_notify: GenericEvent,
    client_message: GenericEvent,
    mapping_notify: GenericEvent,
};

pub const Reply = union(req.Opcode) {
    create_window: void,
    change_window_attributes: void,
    get_window_attributes: rep.GetWindowAttributesReply,
    destroy_window: void,
    destroy_subwindows: void,
    change_save_set: void,
    reparent_window: void,
    map_window: void,
    map_subwindows: void,
    unmap_window: void,
    unmap_subwindows: void,
    configure_window: void,
    circulate_window: void,
    get_geometry: rep.GetGeometryReply,
    query_tree: rep.QueryTreeReply,
    intern_atom: rep.InternAtomReply,
    get_atom_name: rep.GetAtomNameReply,
    change_property: void,
    delete_property: void,
    get_property: rep.GetPropertyReply,
    list_properties: rep.ListPropertiesReply,
    set_selection_owner: void,
    get_selection_owner: rep.GetSelectionOwnerReply,
    convert_selection: void,
    send_event: void,
    grab_pointer: rep.GrabPointerReply,
    ungrab_pointer: void,
    grab_button: void,
    ungrab_button: void,
    change_active_pointer_grab: void,
    grab_keyboard: rep.GrabKeyboardReply,
    ungrab_keyboard: void,
    grab_key: void,
    ungrab_key: void,
    allow_events: void,
    grab_server: void,
    ungrab_server: void,
    query_pointer: rep.QueryPointerReply,
    get_motion_events: rep.GetMotionEventsReply,
    translate_coordinates: rep.TranslateCoordinatesReply,
    warp_pointer: void,
    set_input_focus: void,
    get_input_focus: rep.GetInputFocusReply,
    query_keymap: rep.QueryKeymapReply,
    open_font: void,
    close_font: void,
    query_font: rep.QueryFontReply,
    query_text_extents: rep.QueryTextExtentsReply,
    list_fonts: rep.ListFontsReply,
    // TODO: ListFontsWithInfoReply | ListFontsWithInfoReplySentinel
    list_fonts_with_info: void,
    set_font_path: void,
    get_font_path: rep.GetFontPathReply,
    create_pixmap: void,
    free_pixmap: void,
    create_gc: void,
    change_gc: void,
    copy_gc: void,
    set_dashes: void,
    set_clip_rectangles: void,
    free_gc: void,
    clear_area: void,
    copy_area: void,
    copy_plane: void,
    poly_point: void,
    poly_line: void,
    poly_segment: void,
    poly_rectangle: void,
    poly_arc: void,
    fill_poly: void,
    poly_fill_rectangle: void,
    poly_fill_arc: void,
    put_image: void,
    get_image: rep.GetImageReply,
    poly_text_8: void,
    poly_text_16: void,
    image_text_8: void,
    image_text_16: void,
    create_colormap: void,
    free_colormap: void,
    copy_colormap_and_free: void,
    install_colormap: void,
    uninstall_colotmap: void,
    list_installed_colormaps: rep.ListInstalledColormapsReply,
    alloc_color: rep.AllocColorReply,
    alloc_named_color: rep.AllocNamedColorReply,
    alloc_color_cells: rep.AllocColorCellsReply,
    alloc_color_planes: rep.AllocColorPlanesReply,
    free_colors: void,
    store_colors: void,
    store_named_color: void,
    query_colors: rep.QueryColorsReply,
    lookup_color: rep.LookupColorReply,
    create_cursor: void,
    create_glyph_cursor: void,
    free_cursor: void,
    recolor_cursor: void,
    query_best_size: rep.QueryBestSizeReply,
    query_extension: rep.QueryExtensionReply,
    list_extensions: rep.ListExtensionsReply,
    change_keyboard_mapping: void,
    get_keyboard_mapping: rep.GetKeyboardMappingReply,
    change_keyboard_control: void,
    get_keyboard_control: rep.GetKeyboardControlReply,
    bell: void,
    change_pointer_control: void,
    get_pointer_control: rep.GetPointerControlReply,
    set_screen_saver,
    get_screen_saver: rep.GetScreenSaverReply,
    change_hosts: void,
    list_hosts: rep.ListHostsReply,
    set_access_control: void,
    set_close_down_mode: void,
    kill_client: void,
    rotate_properties: void,
    force_screen_saver: void,
    set_pointer_mapping: rep.SetPointerMappingReply,
    get_pointer_mapping: rep.GetPointerMappingReply,
    set_modifier_mapping: rep.SetModifierMappingReply,
    get_modifier_mapping: rep.GetModifierMappingReply,
    no_operation: void,
};

pub const Error = extern struct {
    code: Code = .@"error",
    error_code: ErrorCode,
    sequence_number: u16,
    data: u32,
    minor_opcode: u16,
    major_opcode: u8,
    unused: [21]u8 = [1]u8{0} ** 21,
};

pub const GenericReply = extern struct {
    code: Code = .reply,
    data_1: u8,
    sequence_number: u16,
    reply_len: u32, // number of extra u32s
    data_2: u64,
    data_3: u64,
    data_4: u64,
};

pub const GenericEvent = extern struct {
    code: Code,
    data_1: u8,
    data_2: u16,
    data_3: u32,
    data_4: u64,
    data_5: u64,
    data_6: u64,
};

pub const Code = enum(u8) {
    // XMessageError, 32 bytes
    @"error" = 0,
    // generic reply, 32 bytes + additional data
    reply = 1,
    // events, 32 bytes each
    key_press = 2,
    key_release,
    button_press,
    button_release,
    motion_notify,
    enter_notify,
    leave_notify,
    focus_in,
    focus_out,
    keymap_notify,
    expose,
    graphics_exposure,
    no_exposure,
    visbility_notify,
    create_notify,
    destroy_notify,
    unmap_notify,
    map_notify,
    map_request,
    reparent_notify,
    configure_notify,
    configure_request,
    gravity_notify,
    resize_request,
    circulate_notify,
    circulate_request,
    property_notify,
    selection_clear,
    selection_request,
    selection_notify,
    colormap_notify,
    client_message,
    mapping_notify,
};

pub const ErrorCode = enum(u8) {
    request = 1,
    value,
    window,
    pixmap,
    atom,
    cursor,
    font,
    match,
    drawable,
    access,
    alloc,
    colormap,
    gcontext,
    idchoice,
    name,
    length,
    implementation,
};
